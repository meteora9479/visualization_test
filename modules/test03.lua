require('cutorch')
require('cunn')
require('unn')

local conv1 = nn.SpatialConvolutionMM(3,8,3,3,1,1,1,1)
local pool1 = unn.DualSpatialMaxPooling(2,2,2,2)
local pool2 = unn.DualSpatialMaxUnpooling()
local conv2 = nn.SpatialConvolutionMM(8,3,3,3,1,1,1,1)
local encoder = nn.Sequential()
encoder:add(conv1)
encoder:add(pool1)
local decoder = nn.Sequential()
decoder:add(pool2)
decoder:add(conv2)
local net = nn.Sequential()
net:add(encoder)
net:add(decoder)
net:cuda()
pool2:setDualModule(pool1)
local x = torch.CudaTensor(10,3,64,64)
print('x:size = ' .. tostring(x:size()))
local y = net:forward(x)
print('y:size = ' .. tostring(y:size()))
local z = net:backward(x,y)
print('z:size = ' .. tostring(z:size()))
